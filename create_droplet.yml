---
- hosts: localhost
  connection: local
  become: no
  gather_facts: false

  vars:
    do_unique_name: yes
    droplet_name: "{{ my_droplet_name }}"
    do_region: sfo2
    do_image: centos-8-x64
    do_wait: yes
    do_wait_timeout: 500
    do_size_id: s-1vcpu-1gb
    do_state: present
    do_ssh_keys: [ '113055', '26017821', '26017817', '26017805', '26017812', '26017803', '26017837' ]
    do_ipv6: no
    do_private_networking: yes
    do_monitoring: yes
    do_backups: no

  tasks:
  # Create basic DigitalOcean droplet
    - name: create DigitalOcean CentOS droplet
      digital_ocean_droplet: 
        name: "{{ droplet_name }}"
        oauth_token: "{{ DO_API_TOKEN }}"
        unique_name: "{{ do_unique_name }}"
        region: "{{ do_region }}"
        image: "{{ do_image }}"
        wait: "{{ do_wait }}"
        wait_timeout: "{{ do_wait_timeout }}"
        size_id: "{{ do_size_id }}"
        state: "{{ do_state }}"
        ssh_keys: "{{ do_ssh_keys }}"
        ipv6: "{{ do_ipv6 }}"
        private_networking: "{{ do_private_networking }}"
        monitoring: "{{ do_monitoring }}"
        backups: "{{ do_backups }}"
      register: created_droplet
  
    - name: create DigitalOcean tag
      digital_ocean_tag:
        name: ansible_created
        oauth_token: "{{ DO_API_TOKEN }}"
        resource_id: "{{ created_droplet.data.droplet.id }}"
        state: present
      register: tag_response

    - debug:
        msg: "ID is {{ created_droplet.data.droplet.id }}"

    - debug:
        msg: "IP is {{ created_droplet.data.ip_address }}" 

    - name: add new droplet to dynamic inventory
      add_host:
        name: "{{ created_droplet.data.ip_address }}"
        groups: do

- hosts: do
  remote_user: root
  gather_facts: no

  vars:
    ansible_python_interpreter: /usr/bin/python3
    copy_local_key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
    sys_packages: [ 'curl', 'vim', 'git', 'firewalld', 'httpd-tools' ]
    docker_packages: [ 'docker-ce', 'docker-ce-cli', 'containerd.io', 'docker-compose' ]
    firewalld_pub_svcs: [ 'ssh', 'http', 'https', 'cockpit' ]
    enabled_svcs: [ 'cockpit' ]

  tasks: 
    - name: wait for port 22 to become available
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
      delegate_to: localhost

    - name: gather facts now that host is available
      setup: 
  
  # Sudo Group Setup
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present
  
    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'
  
  # User + Key Setup
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ admin_user }}"
        state: present
        groups: wheel
        append: yes
        create_home: yes
        uid: 10000
        password: "{{ admin_user_pwd }}"
  
#    - name: Set authorized key for remote user
#      authorized_key:
#        user: "{{ create_user }}"
#        state: present
#        key: "{{ copy_local_key }}"
  
    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'
  
  # Update DNF and Install Packages
    - name: Update dnf
      dnf: update_cache=yes state=latest

    - name: Upgrade all packages to the latest version
      dnf:
        name: "*"
        state: latest  

    - name: Install required system packages
      dnf: name="{{ sys_packages }}" state=latest

    - name: Start Firewalld
      systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: Move Private Network Interface to Internal Zone
      firewalld:
        zone: internal
        interface: eth1
        permanent: yes

    - name: Add selected services to firewalld public zone
      firewalld:
        zone: public
        service: "{{ firewalld_pub_svcs }}"
        permanent: yes

    - name: Enable and start selected services
      systemd:
        name: "{{ enabled_svcs }}"
        enabled: yes
        state: started
