---

- name: install tinc
  apt:
    name: tinc
    state: latest

- name: ensure tinc netname directory exists
  file:
    path: "/etc/tinc/{{ tinc_netname }}/hosts"
    recurse: True
    state: directory

- name: create /etc/tinc/nets.boot file from template
  template:
    src: nets.boot.j2
    dest: /etc/tinc/nets.boot
  notify:
    - restart tinc

- name: ensure tinc.conf contains connection to all other nodes
  template:
    src: tinc.conf.j2
    dest: "/etc/tinc/{{ tinc_netname }}/tinc.conf"
  notify:
    - reload tinc

- name: create tinc-up file
  template:
    src: tinc-up.j2
    dest: "/etc/tinc/{{ tinc_netname }}/tinc-up"
    mode: 0755
  notify:
    - restart tinc

- name: create tinc-down file
  template:
    src: tinc-down.j2
    dest: "/etc/tinc/{{ tinc_netname }}/tinc-down"
    mode: 0755
  notify:
    - restart tinc

- name: create subnet-up file
  template:
    src: subnet-up.j2
    dest: "/etc/tinc/{{ tinc_netname }}/subnet-up"
    mode: 0755
  notify:
    - restart tinc

- name: create subnet-down file
  template:
    src: subnet-down.j2
    dest: "/etc/tinc/{{ tinc_netname }}/subnet-down"
    mode: 0755
  notify:
    - restart tinc

- name: ensure tinc hosts file binds to physical ip address
  lineinfile:
    path: "/etc/tinc/{{ tinc_netname }}/hosts/{{ ansible_hostname }}"
    line: "Address = {{ tinc_physical_ip }}"
    create: yes
  notify:
    - restart tinc

- name: ensure subnet ip address is properly set in tinc host file
  lineinfile:
    path: "/etc/tinc/{{ tinc_netname }}/hosts/{{ ansible_hostname }}"
    line: "Subnet = {{ vpn_ip }}/32"
    create: yes
  notify:
    - restart tinc

- name: Add options to host file
  lineinfile:
    path: "/etc/tinc/{{ tinc_netname }}/hosts/{{ ansible_hostname }}"
    insertafter: EOF
    line: "\nCipher = aes-256-gcm"
  notify:
    - restart tinc

- name: Add options to host file
  lineinfile:
    path: "/etc/tinc/{{ tinc_netname }}/hosts/{{ ansible_hostname }}"
    insertafter: EOF
    line: "Digest = sha256\n"
  notify:
    - restart tinc

- name: check whether /etc/tinc/netname/hosts/inventory_hostname contains "-----END RSA PUBLIC KEY-----"
  command: awk '/^-----END RSA PUBLIC KEY-----$/'  "/etc/tinc/{{ tinc_netname }}/hosts/{{ ansible_hostname }}"
  changed_when: "public_key.stdout != '-----END RSA PUBLIC KEY-----'"
  register: public_key

# this is necessary because the public key will not be generated (non-interactively) if the private key already exists
- name: delete private key and regenerate keypair if public key is absent from tinc hosts file
  file:
    path: "/etc/tinc/{{ tinc_netname }}/rsa_key.priv"
    state: absent
  when: public_key.changed

- name: create tinc private key (and append public key to tincd hosts file)
  shell: "tincd -n {{ tinc_netname }} -K4096"
  args:
    creates: "/etc/tinc/{{ tinc_netname }}/rsa_key.priv"
  notify:
    - restart tinc

#- name: Copy Public Key for insertion into host file
#   copy:
#      remote_src: yes
#      src: "/etc/tinc/{{ tinc_netname }}/rsa_key.pub"
#      dest: "/etc/tinc/{{ tinc_netname }}/{{ ansible_hostname }}_rsa_key.pub"
#  notify:
#    - restart tinc

#- name: Insert public key into hosts file
#  blockinfile:
#    path: "/etc/tinc/{{ tinc_netname }}/hosts/{{ ansible_hostname }}"
#    insertafter: EOF
#    marker: ""
#    block: "/etc/tinc/{{ tinc_netname }}/{{ ansible_hostname }}_rsa_key.pub"
#  notify:
#    - restart tinc

- name: fetch tinc hosts file after key creation
  fetch:
    src: "/etc/tinc/{{ tinc_netname }}/hosts/{{ ansible_hostname }}"
    dest: "files/hosts/{{ ansible_hostname }}"
    flat: yes
  notify:
    - reload tinc

- name: sync the fetched tinc hosts files on each host
  synchronize:
    src: files/hosts/
    dest: /etc/tinc/{{ tinc_netname }}/hosts/
  notify:
    - reload tinc

- name: run handlers
  meta: flush_handlers

- name: ensure tinc is started
  systemd:
    name: "tinc@{{ tinc_netname }}"
    enabled: yes
    state: started

#- name: add nodes to /etc/hosts (ansible_inventory resolves to vpn_ip)
#  lineinfile: 
#    dest: /etc/hosts regexp='.*{{ item }}$' 
#    line: "{{ hostvars[item].vpn_ip }} {{item}}"
#    state: present
#  when: hostvars[item].vpn_ip is defined
#  with_items: "{{ play_hosts }}"