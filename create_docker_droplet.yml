---
- hosts: localhost
  connection: local
  become: no
  gather_facts: false

  vars:
    do_unique_name: yes
    droplet_name: "{{ my_droplet_name }}"
    do_region: sfo2
    do_image: "{{ my_droplet_image }}"
    do_wait: yes
    do_wait_timeout: 500
    do_size_id: "{{ my_droplet_size }}"
    do_state: present
    do_ssh_keys: [ '113055', '26017821', '26017817', '26017805', '26017812', '26017803', '26017837' ]
    do_ipv6: no
    do_private_networking: yes
    do_monitoring: yes
    do_backups: no
    do_user_data: "#cloud-config\npackage_upgrade: true\npackages:\n - aptitude\n - python3"

  tasks:
  # Create basic DigitalOcean droplet
    - name: create DigitalOcean Ubuntu Docker droplet
      digital_ocean_droplet: 
        name: "{{ droplet_name }}"
        oauth_token: "{{ DO_API_TOKEN }}"
        unique_name: "{{ do_unique_name }}"
        region: "{{ do_region }}"
        image: "{{ do_image }}"
        wait: "{{ do_wait }}"
        wait_timeout: "{{ do_wait_timeout }}"
        size_id: "{{ do_size_id }}"
        state: "{{ do_state }}"
        ssh_keys: "{{ do_ssh_keys }}"
        ipv6: "{{ do_ipv6 }}"
        private_networking: "{{ do_private_networking }}"
        monitoring: "{{ do_monitoring }}"
        backups: "{{ do_backups }}"
        user_data: "{{ do_user_data }}"
      register: created_droplet
  
    - name: create DigitalOcean tag
      digital_ocean_tag:
        name: docker
        oauth_token: "{{ DO_API_TOKEN }}"
        resource_id: "{{ created_droplet.data.droplet.id }}"
        state: present
      register: tag_response

    - debug:
        msg: "ID is {{ created_droplet.data.droplet.id }}"

    - debug:
        msg: "IP is {{ created_droplet.data.ip_address }}" 

    - name: add new droplet to dynamic inventory
      add_host:
        name: "{{ created_droplet.data.ip_address }}"
        groups: do

- hosts: do
  remote_user: root
  gather_facts: no

  vars:
#    ansible_python_interpreter: /usr/bin/python3
    copy_local_key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
    sys_packages: [ 'apt-transport-https', 'ca-certificates', 'gnupg-agent', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'curl', 'wget', 'vim', 'git', 'apache2-utils' ]
    docker_packages: [ 'docker-ce', 'docker-ce-cli', 'containerd.io', 'docker-compose' ]
    ufw_pub_tcp_ports: [ '22', '80', '443', '655' ]
    ufw_pub_udp_ports: [ '655' ]
    enabled_svcs: [ 'cockpit' ]
    allowed_networks: [ '192.168.250.0/24', '192.168.52.0/24', '192.168.50.0/24' ]
    default_container_image: "portainer/portainer"

  tasks: 
    - name: wait for port 22 to become available
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
      delegate_to: localhost

    - name: Wait for cloud init to finish
      cloud_init_data_facts:
        filter: status
      register: res
      until: "res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage"
      retries: 50
      delay: 5
      
    - name: gather facts now that host is available
      setup: 

    - name: Upgrade all packages to the latest version
      apt:
        name: "*"
        state: latest
      register: apt_1
      retries: 5
      until: apt_1 is success

  # Install Packages
    - name: Install required system packages
      apt: 
        name: "{{ item }}"
        state: latest
      register: apt_2
      retries: 5
      until: apt_2 is success
      loop: "{{ sys_packages }}"

  # Sudo Group Setup
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present
  
    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'
  
  # User + Key Setup
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ admin_user }}"
        state: present
        groups: wheel
        append: yes
        create_home: yes
        uid: 10000
        shell: /bin/bash
        password: "{{ admin_user_pwd | password_hash('sha512') }}"
  
    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ admin_user }}"
        state: present
        key: "{{ copy_local_key }}"
  
    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'

# UFW setup and configuration
    - name: Allow UFW ports (TCP)
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ ufw_pub_tcp_ports | flatten(1) }}"

    - name: Allow UFW port (UDP)
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ ufw_pub_udp_ports | flatten(1) }}"

    - name: Allow tinc networks
      ufw:
        rule: allow
        src: "{{ item }}"
      loop: "{{ allowed_networks | flatten(1) }}"

    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming

    - include_role: 
        name: tinc
      vars:
        vpn_ip: 192.168.250.100

    # Install and configure AutoFS and map NFS to NAS01
    - name: Install AutoFS
      apt:
        name: autofs 
        state: latest
      tags: autofs

    - name: Configure auto.master
      lineinfile:
        path: /etc/auto.master
        regexp: '/nfs'
        line: '/nfs    /etc/auto.nfs --timeout=60'
      tags: autofs

    - name: Copy auto.nfs to system
      copy: 
        src: roles/common/files/auto.nfs 
        dest: /etc/auto.nfs
      tags: autofs

    - name: Ensure AutoFS is enabled at boot and start the daemon
      systemd:
        name: autofs
        state: started
        enabled: yes
      tags: autofs

  # Install Docker GPG Key
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

  # Install Docker Components
    - name: Install Docker components
      apt: 
        name: "{{ item }}" 
        state: latest
      register: apt_4
      retries: 5
      until: apt_4 is success
      loop: "{{ docker_packages | flatten(1) }}"

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Install DOBS docker plugin
      command: "docker plugin install rexray/dobs DOBS_TOKEN={{ DO_API_TOKEN }} DOBS_REGION={{ do_region }} LINUX_VOLUME_FILEMODE=0775"

    - name: Create docker network app_main
      docker_network:
        name: app_main
        ipam_config:
          - subnet: 172.25.0.0/16
            gateway: 172.25.0.1
            iprange: 172.25.5.0/24

#    - name: Create docker network app_main_v6
#      docker_network:
#        name: app_main_v6
#        enable_ipv6: yes
#        ipam_config:
#          - subnet: fdd1:ac8c:0557:7ce1::/64

#  # Pull default docker image
#    - name: Pull default Docker image
#      docker_image:
#        name: "{{ default_container_image }}"
#        source: pull